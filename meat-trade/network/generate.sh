#!/bin/bash
#
# Copyright CPqD All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

# Source env.sh

. ./env.sh

# Print the usage message
function printHelp() {
  echo "Usage: "
  echo "  generate.sh [-c <channel name>] [-t <timeout>] [-d <delay>] [-f <docker-compose-file>] [-s <dbtype>] [-l <language>] [-i <imagetag>] [-v]"
  echo "    -c <channel name> - channel name to use (defaults to \"mychannel\")"
  echo "    -t <timeout> - CLI timeout duration in seconds (defaults to 10)"
  echo "    -d <delay> - delay duration in seconds (defaults to 3)"
  echo "    -f <docker-compose-file> - specify which docker-compose file use (defaults to docker-compose-cli.yaml)"
  echo "    -l <language> - the chaincode language: golang (default) or node"
  echo "    -i <imagetag> - the tag to be used to launch the network (defaults to \"latest\")"
  echo "    -v - verbose mode"
  echo "  generate.sh -h (print this message)"
  echo
}

# Using docker-compose-e2e-template.yaml, replace constants with private key file names
# generated by the cryptogen tool and output a docker-compose.yaml specific to this
# configuration
function replacePrivateKey() {
  # sed on MacOSX does not support -i flag with a null extension. We will use
  # 't' for our back-up's extension and delete it at the end of the function
  ARCH=$(uname -s | grep Darwin)
  if [ "${ARCH}" == "Darwin" ]; then
    OPTS="-it"
  else
    OPTS="-i"
  fi

  # Copy the template to the file that will be modified to add the private key
  cp docker-compose-e2e-template.yaml docker-compose-e2e.yaml

  # The next steps will replace the template's contents with the
  # actual values of the private key file names for the CAs.
  CURRENT_DIR=${PWD}
  cd crypto-config/peerOrganizations/farm1.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA0_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  cd crypto-config/peerOrganizations/farm2.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA1_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  cd crypto-config/peerOrganizations/slaughterhouse.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA2_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  cd crypto-config/peerOrganizations/supermarket1.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA3_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  cd crypto-config/peerOrganizations/inspection1.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA4_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  cd crypto-config/peerOrganizations/inspection2.kingbeefcattle.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "${CURRENT_DIR}"
  sed ${OPTS} "s/CA5_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-e2e.yaml
  # If MacOSX, remove the temporary backup of the docker-compose file
  if [ "${ARCH}" == "Darwin" ]; then
    rm docker-compose-e2e.yamlt
  fi
}

# Generates Org certs using cryptogen tool
function generateCerts() {
  which cryptogen
  if [ "$?" -ne 0 ]; then
    echo "cryptogen tool not found. exiting"
    exit 1
  fi
  echo
  echo "################################################################"
  echo "#######    Generate certificates using cryptogen tool    #######"
  echo "################################################################"

  if [ -d "crypto-config" ]; then
    rm -Rf crypto-config
  fi
  set -x
  cryptogen generate --config=./crypto-config.yaml
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate certificates..."
    exit 1
  fi
  echo
}

# Generate orderer genesis block, channel configuration transaction and
# anchor peer update transactions
function generateChannelArtifacts() {
  which configtxgen
  if [ "$?" -ne 0 ]; then
    echo "configtxgen tool not found. exiting"
    exit 1
  fi

  echo "######################################################"
  echo "#######    Generating Orderer Genesis block    #######"
  echo "######################################################"
  # Note: For some unknown reason (at least for now) the block file can't be
  # named orderer.genesis.block or the orderer will fail to launch!
  set -x
  configtxgen -profile SixOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate orderer genesis block..."
    exit 1
  fi
  echo
  echo "###############################################################################"
  echo "#######    Generating channel configuration transaction 'channel.tx'    #######"
  echo "###############################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID ${CHANNEL_NAME}
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate channel configuration transaction..."
    exit 1
  fi

  echo
  echo "################################################################"
  echo "#######    Generating anchor peer update for Farm1MSP    #######"
  echo "################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Farm1MSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg Farm1MSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for Farm1MSP..."
    exit 1
  fi

  echo
  echo "################################################################"
  echo "#######    Generating anchor peer update for Farm2MSP    #######"
  echo "################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Farm2MSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg Farm2MSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for Farm2MSP..."
    exit 1
  fi

  echo
  echo "#########################################################################"
  echo "#######    Generating anchor peer update for SlaughterhouseMSP    #######"
  echo "#########################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/SlaughterhouseMSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg SlaughterhouseMSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for SlaughterhouseMSP..."
    exit 1
  fi

  echo
  echo "#######################################################################"
  echo "#######    Generating anchor peer update for Supermarket1MSP    #######"
  echo "#######################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Supermarket1MSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg Supermarket1MSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for SupermercadoMSP..."
    exit 1
  fi

  echo
  echo "######################################################################"
  echo "#######    Generating anchor peer update for Inspection1MSP    #######"
  echo "######################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Inspection1MSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg Inspection1MSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for Inspection1MSP..."
    exit 1
  fi

  echo
  echo "######################################################################"
  echo "#######    Generating anchor peer update for Inspection2MSP    #######"
  echo "######################################################################"
  set -x
  configtxgen -profile SixOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Inspection2MSPanchors.tx -channelID ${CHANNEL_NAME} -asOrg Inspection2MSP
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate anchor peer update for Inspection2MSP..."
    exit 1
  fi
  echo
}

if [ ! -d "channel-artifacts" ]; then
   mkdir channel-artifacts
fi

while getopts "h?c:t:d:f:s:l:i:v" opt; do
  case "$opt" in
  h | \?)
    printHelp
    exit 0
    ;;
  c)
    CHANNEL_NAME=${OPTARG}
    ;;
  t)
    CLI_TIMEOUT=${OPTARG}
    ;;
  d)
    CLI_DELAY=${OPTARG}
    ;;
  f)
    COMPOSE_FILE=${OPTARG}
    ;;
  l)
    CC_LANG=${OPTARG}
    ;;
  i)
    IMAGE_TAG=$(go env GOARCH)"-"${OPTARG}
    ;;
  v)
    VERBOSE=true
    ;;
  esac
done


# Echo the options
echo
echo "Generating certs and genesis block for channel '${CHANNEL_NAME}' with CLI timeout of '${CLI_TIMEOUT}' seconds and CLI delay of '${CLI_DELAY}' seconds"
echo
#Create the network using docker compose
generateCerts
replacePrivateKey
generateChannelArtifacts

